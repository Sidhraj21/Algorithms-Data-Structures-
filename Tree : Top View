/* You are given a pointer to the root of a binary tree. Print the top view of the binary tree. 
Top view means when you look the tree from the top the nodes you will see will be called the top view of the tree. */

/* The idea is to store all the elements in left of the root in a stack(including the root). Store all the elements
in the right subtree in a Queue. Then pop the stack and print the elements and dequeue the queue and print the elements*/

   /* 
    
    class Node 
       int data;
       Node left;
       Node right;
   */
   void topView(Node root) {
       Node saveroot = root;
      Stack<Node> lefts = new Stack<Node>();
      Queue<Node> rightq = new LinkedList<>();
       
       while(root != null){
           lefts.push(root);
           root = root.left;
       }
       while(saveroot.right != null) {
           rightq.add(saveroot.right);
           saveroot = saveroot.right;
       }
       while(!lefts.isEmpty()){
           System.out.print((int)lefts.pop().data + " ");
       }
       while(!rightq.isEmpty()){
           System.out.print((int)rightq.remove().data + " ");
       }   
       
      
    }
