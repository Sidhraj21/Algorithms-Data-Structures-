/* Given  strings of brackets, determine whether each sequence of brackets
is balanced. If a string is balanced, print YES on a new line; otherwise, print NO on a new line. */

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static String isBalanced(String s) {
        String result = "YES";
        if(s == null) {
            return result;
        }
        int count = 0;
        // if string length is odd, no matching brackets
        int x = s.length();
        if(x%2 != 0) {
            result = "NO";
            return result;
        }
        Stack<String> brackets = new Stack<String>();
        for(int i = 0; i < x; i++) {
            String str = Character.toString(s.charAt(i));
        //    System.out.println("String before push : " + str);
            if(str.equals("{") || str.equals("[") || str.equals("(")) {
                brackets.push(str);
                count++;
            } else {
                if(!brackets.isEmpty()) {
                String comp = brackets.pop();
                count--;
                if((comp.equals("(") && str.equals(")")) || (comp.equals("{") && str.equals("}")) || (comp.equals("[") &&                          str.equals("]"))) {
                     result = "YES";
                } else {
                    result = "NO";
                    return result;
                }
          } else {
                    result = "NO";
                    return result;
                }
      }
        }
        if(count != 0) {
            result = "NO";
        }
        
      return result;
   }
         
     

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for(int a0 = 0; a0 < t; a0++){
            String s = in.next();
            String result = isBalanced(s);
            System.out.println(result);
        }
        in.close();
    }
}
