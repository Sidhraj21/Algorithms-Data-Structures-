/* Huffman coding assigns variable length codewords to fixed length input characters based on
their frequencies. More frequent characters are assigned shorter codewords and less frequent 
characters are assigned longer codewords. A Huffman tree is made for the input string and characters
are decoded based on their position in the tree. We add a '0' to the codeword when we move left in the 
binary tree and a '1' when we move right in the binary tree. We assign codes to the leaf nodes which represent 
the input characters. */

/*IMPORTANT ::: In java single quotes means character, "" double quotes means string*/
/* the idea is to move right and left as we encounter 0 and 1. When we reach leaf(both right & left child null)*/
/* we print the data of the leaf and again reset the root to the original root.*/


/*  
   class Node
      public  int frequency; // the frequency of this tree
       public  char data;
       public  Node left, right;
    
*/ 

void decode(String S ,Node root)
    {
        Node saveroot = root;
        String x = "";
        int len = S.length();
    for(int i = 0; i < len; i++){
        String q = Character.toString(S.charAt(i));
        if(q.equals("0")){
              root = root.left;
              if(root.left == null && root.right == null){
                  x = x + Character.toString(root.data);
                  root = saveroot;
              }
        } else if(q.equals("1")){
              root = root.right;
              if(root.left == null && root.right == null){
                  x = x + Character.toString(root.data);
                  root = saveroot;
             }
       }
    }
    System.out.println(x);
}
