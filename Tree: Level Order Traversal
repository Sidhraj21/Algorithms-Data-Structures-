/*You are given a pointer to the root of a binary tree. You need to print the level order traversal of this tree. 
In level order traversal, we visit the nodes level by level from left to right.*/


/* Level Order Tree Traversal is infact BFS(Breadth First Search). The idea is to create a queue and arraylist.
Store the root in the queue. While the queue is not empty, we dequeue the element from the queue, add its left and right 
child to the queue, and before printing we check if the item has already been printed(visited). If the item is not present
in the array, then we print it and then add it to the arraylist. if the item is present in the arraylist, we dont print it.*/ 



 /* 
    
    class Node 
       int data;
       Node left;
       Node right;
   */
   void levelOrder(Node root) {
       Queue<Node> BFS = new LinkedList<Node>();
       ArrayList<Node> check = new ArrayList<Node>();
       BFS.add(root);
       while(!BFS.isEmpty()) {
           Node x = (Node) BFS.remove();
           if(x.left != null) {
               BFS.add(x.left);
           }
           if(x.right != null) {
               BFS.add(x.right);
           }
           if(!check.contains(x)){
               System.out.print((int) x.data + " ");
               check.add(x);
           }
       }
      
    }
